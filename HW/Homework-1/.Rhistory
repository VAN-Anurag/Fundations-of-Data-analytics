}
}
}
}
# There is some confusion whether "anniversary" keyword should be considered in the dataset as wine age
# Answer WITHOUT considering anniversary (using grep)
wine_twenty_without_anniversary <- df_wine[grep("(20 |20-|20th|20- )( )?(Y+|y+|Anos|anos|anni )",df_wine$designation,ignore.case = T),]
# Answer WITH anniversary (using str_which)
wine_twenty_with_anniversary <- df_wine[str_which(df_wine$designation,"(20 |20-|20th)( )?(Y+|y+|Anniver+|anniver+|Anos|anos|anni)"),]
# According to our observation of data, 20th Anniversary wine does NOT necessarily mean a 20 year old wine
print(paste("There are ", dim(wine_twenty_with_anniversary)[1],"wines if we consider 'anniversary' keyword as wine age."))
print(paste("There are ", dim(wine_twenty_without_anniversary)[1],"wines without considering 'anniversary' keyword as wine age."))
## Iterate over all the possible strings and get rows after partial match
for (i in string_list){
index <- str_which(df_wine$designation, i)
answer <- df_wine[index,]
temp_df <- rbind(temp_df,answer)
}
## This result is producing 85 results which includes 'Anniversary' keyword as well
## Lowercase all the designation for uniformity and reduce redundancy
df_wine$designation <- str_to_lower(df_wine$designation)
## Create a vector of possible strings
string_list <- c("20 years","20 year","20 yrs","20 yr","20 anos","20_years","20_year","20_yrs","20_yr","20_anos","20-years","20-year","20-yrs","20-yr","20-anos","20years","20year","20yr","20yrs","20anos","20 th anni","20th anni","20 anni")
temp_df <- data.frame()
## Iterate over all the possible strings and get rows after partial match
for (i in string_list){
index <- str_which(df_wine$designation, i)
answer <- df_wine[index,]
temp_df <- rbind(temp_df,answer)
}
## Drop duplicate rows (if any)
final_df <- temp_df[!duplicated(temp_df),]
print(paste("There are ", dim(final_df)[1],"wines if we consider 'anniversary' keyword as wine age."))
library(tidyr)
# Pivot the table to longer form
longer_keywords <- df_keywords %>% pivot_longer(cols= starts_with("Keyword"), values_to="Keyword")
# Get all distinct keywords
unique_keywords <- distinct(longer_keywords,Keyword)
# Remove the "" empty keyword
unique_keywords <- unique_keywords[!(unique_keywords$Keyword == ""),]
# Introduce a new CO_OCCURENCE variable to get the same data in wider form
unique_keywords$CO_OCCURRENCE <- 0
# Make the data available in wider form
wide_unique_keywords <- unique_keywords %>% pivot_wider(names_from  =Keyword,values_from=CO_OCCURRENCE,values_fill=0)
# Bind both wider and longer table together to get adjacency matrix
keyword_matrix <- bind_rows(unique_keywords,wide_unique_keywords)
# Dropping dummy column of co occurrence
keyword_matrix <- keyword_matrix[,!(names(keyword_matrix) %in% c("CO_OCCURRENCE"))]
# Assigning all values to 0
keyword_matrix[,c(2:249)] <- 0
## Solution 1
# Removing all blank observations
df_keywords <- df_keywords[!(df_keywords$Title == ""),]
# Combining all keywords for an article for easier analysis
df_keywords$COMBINED_KEYWORDS <-paste(trimws(df_keywords$`Keyword 1`) , trimws(df_keywords$`Keyword 2`) , trimws(df_keywords$`Keyword 3`) , trimws(df_keywords$`Keyword 4`)  , trimws(df_keywords$`Keyword 5`) , trimws(df_keywords$`Keyword 6`),                               trimws(df_keywords$`Keyword 7`)  , trimws(df_keywords$`Keyword 8`) , trimws(df_keywords$`Keyword 9`),
trimws(df_keywords$`Keyword 10`) , trimws(df_keywords$`Keyword 11`) , trimws(df_keywords$`Keyword 12`),sep="-"  )
num_articles <- dim(df_keywords)[1]
unq_keywords = names(keyword_matrix)
# 1 Extra entry in matrix
num_keywords <- dim(keyword_matrix)[1] - 1
## To correct -> Loop over articles first, then matrix
# Loop over all articles
for (i in 1:num_articles) {
current_article_keywords <- df_keywords[i,'COMBINED_KEYWORDS']
# Loop over rows in adjacency matrix
for( j in 1:num_keywords){
current_row_keyword <- keyword_matrix[j,1]
# Loop over columns in adjacency matrix
for (k in 2:num_keywords) {
#
current_col_keyword = unq_keywords[k]
if (current_article_keywords != "-----------" && current_col_keyword != current_row_keyword && (grepl(current_row_keyword,current_article_keywords,fixed = TRUE) && grepl(current_col_keyword,current_article_keywords,fixed = TRUE)) ) {
keyword_matrix[j,k] <- keyword_matrix[j,k] + 1
}
}
}
}
library(tidyr)
# Pivot the table to longer form
longer_keywords <- df_keywords %>% pivot_longer(cols= starts_with("Keyword"), values_to="Keyword")
# Get all distinct keywords
unique_keywords <- distinct(longer_keywords,Keyword)
# Remove the "" empty keyword
unique_keywords <- unique_keywords[!(unique_keywords$Keyword == ""),]
# Introduce a new CO_OCCURENCE variable to get the same data in wider form
unique_keywords$CO_OCCURRENCE <- 0
# Make the data available in wider form
wide_unique_keywords <- unique_keywords %>% pivot_wider(names_from  =Keyword,values_from=CO_OCCURRENCE,values_fill=0)
# Bind both wider and longer table together to get adjacency matrix
keyword_matrix <- bind_rows(unique_keywords,wide_unique_keywords)
# Dropping dummy column of co occurrence
keyword_matrix <- keyword_matrix[,!(names(keyword_matrix) %in% c("CO_OCCURRENCE"))]
# Assigning all values to 0
keyword_matrix[,c(2:249)] <- 0
## Solution 1
# Removing all blank observations
df_keywords <- df_keywords[!(df_keywords$Title == ""),]
# Combining all keywords for an article for easier analysis
df_keywords$COMBINED_KEYWORDS <-paste(trimws(df_keywords$`Keyword 1`) , trimws(df_keywords$`Keyword 2`) , trimws(df_keywords$`Keyword 3`) , trimws(df_keywords$`Keyword 4`)  , trimws(df_keywords$`Keyword 5`) , trimws(df_keywords$`Keyword 6`),                               trimws(df_keywords$`Keyword 7`)  , trimws(df_keywords$`Keyword 8`) , trimws(df_keywords$`Keyword 9`),
trimws(df_keywords$`Keyword 10`) , trimws(df_keywords$`Keyword 11`) , trimws(df_keywords$`Keyword 12`),sep="-"  )
num_articles <- dim(df_keywords)[1]
unq_keywords = names(keyword_matrix)
# 1 Extra entry in matrix
num_keywords <- dim(keyword_matrix)[1] - 1
## To correct -> Loop over articles first, then matrix
# Loop over all articles
for (i in 1:num_articles) {
current_article_keywords <- df_keywords[i,'COMBINED_KEYWORDS']
# Loop over rows in adjacency matrix
for( j in 1:num_keywords){
current_row_keyword <- keyword_matrix[j,1]
# Loop over columns in adjacency matrix
for (k in 2:num_keywords) {
#
current_col_keyword = unq_keywords[k]
if (current_article_keywords != "-----------" && current_col_keyword != current_row_keyword && (grepl(current_row_keyword,current_article_keywords,fixed = TRUE) && grepl(current_col_keyword,current_article_keywords,fixed = TRUE)) ) {
keyword_matrix[j,k] <- keyword_matrix[j,k] + 1
}
}
}
}
View(df_keywords)
library(tidyr)
# Pivot the table to longer form
longer_keywords <- df_keywords %>% pivot_longer(cols= starts_with("Keyword"), values_to="Keyword")
# Get all distinct keywords
unique_keywords <- distinct(longer_keywords,Keyword)
# Remove the "" empty keyword
unique_keywords <- unique_keywords[!(unique_keywords$Keyword == ""),]
# Introduce a new CO_OCCURENCE variable to get the same data in wider form
unique_keywords$CO_OCCURRENCE <- 0
# Make the data available in wider form
wide_unique_keywords <- unique_keywords %>% pivot_wider(names_from  =Keyword,values_from=CO_OCCURRENCE,values_fill=0)
# Bind both wider and longer table together to get adjacency matrix
keyword_matrix <- bind_rows(unique_keywords,wide_unique_keywords)
# Dropping dummy column of co occurrence
keyword_matrix <- keyword_matrix[,!(names(keyword_matrix) %in% c("CO_OCCURRENCE"))]
# Assigning all values to 0
keyword_matrix[,c(2:249)] <- 0
## Solution 1
# Removing all blank observations
df_keywords <- df_keywords[!(df_keywords$Title == ""),]
# Combining all keywords for an article for easier analysis
df_keywords$COMBINED_KEYWORDS <-paste(trimws(df_keywords$`Keyword 1`) , trimws(df_keywords$`Keyword 2`) , trimws(df_keywords$`Keyword 3`) , trimws(df_keywords$`Keyword 4`)  , trimws(df_keywords$`Keyword 5`) , trimws(df_keywords$`Keyword 6`),                               trimws(df_keywords$`Keyword 7`)  , trimws(df_keywords$`Keyword 8`) , trimws(df_keywords$`Keyword 9`),
trimws(df_keywords$`Keyword 10`) , trimws(df_keywords$`Keyword 11`) , trimws(df_keywords$`Keyword 12`),sep="-"  )
num_articles <- dim(df_keywords)[1]
unq_keywords = names(keyword_matrix)
# 1 Extra entry in matrix
num_keywords <- dim(keyword_matrix)[1] - 1
## To correct -> Loop over articles first, then matrix
# Loop over all articles
for (i in 1:num_articles) {
current_article_keywords <- df_keywords[i,'COMBINED_KEYWORDS']
# Loop over rows in adjacency matrix
for( j in 1:num_keywords){
current_row_keyword <- keyword_matrix[j,1]
# Loop over columns in adjacency matrix
for (k in 2:num_keywords) {
#
current_col_keyword = unq_keywords[k]
if (current_article_keywords != "NA-NA-NA-NA-NA-NA-NA-NA-NA-NA-NA-NA" && current_col_keyword != current_row_keyword && (grepl(current_row_keyword,current_article_keywords,fixed = TRUE) && grepl(current_col_keyword,current_article_keywords,fixed = TRUE)) ) {
keyword_matrix[j,k] <- keyword_matrix[j,k] + 1
}
}
}
}
library(tidyr)
# Pivot the table to longer form
longer_keywords <- df_keywords %>% pivot_longer(cols= starts_with("Keyword"), values_to="Keyword")
# Get all distinct keywords
unique_keywords <- distinct(longer_keywords,Keyword)
# Remove the "" empty keyword
unique_keywords <- unique_keywords[!(unique_keywords$Keyword == ""),]
# Introduce a new CO_OCCURENCE variable to get the same data in wider form
unique_keywords$CO_OCCURRENCE <- 0
# Make the data available in wider form
wide_unique_keywords <- unique_keywords %>% pivot_wider(names_from  =Keyword,values_from=CO_OCCURRENCE,values_fill=0)
# Bind both wider and longer table together to get adjacency matrix
keyword_matrix <- bind_rows(unique_keywords,wide_unique_keywords)
# Dropping dummy column of co occurrence
keyword_matrix <- keyword_matrix[,!(names(keyword_matrix) %in% c("CO_OCCURRENCE"))]
# Assigning all values to 0
keyword_matrix[,c(2:249)] <- 0
## Solution 1
# Removing all blank observations
df_keywords <- df_keywords[!(df_keywords$Title == ""),]
# Combining all keywords for an article for easier analysis
df_keywords$COMBINED_KEYWORDS <-paste(trimws(df_keywords$`Keyword 1`) , trimws(df_keywords$`Keyword 2`) , trimws(df_keywords$`Keyword 3`) , trimws(df_keywords$`Keyword 4`)  , trimws(df_keywords$`Keyword 5`) , trimws(df_keywords$`Keyword 6`),                               trimws(df_keywords$`Keyword 7`)  , trimws(df_keywords$`Keyword 8`) , trimws(df_keywords$`Keyword 9`),
trimws(df_keywords$`Keyword 10`) , trimws(df_keywords$`Keyword 11`) , trimws(df_keywords$`Keyword 12`),sep="-"  )
num_articles <- dim(df_keywords)[1]
unq_keywords = names(keyword_matrix)
# 1 Extra entry in matrix
num_keywords <- dim(keyword_matrix)[1] - 1
View(adjacency_matrix)
library(tidyr)
# Pivot the table to longer form
longer_keywords <- df_keywords %>% pivot_longer(cols= starts_with("Keyword"), values_to="Keyword")
# Get all distinct keywords
unique_keywords <- distinct(longer_keywords,Keyword)
# Remove the "" empty keyword
unique_keywords <- unique_keywords[!(unique_keywords$Keyword == ""),]
# Introduce a new CO_OCCURENCE variable to get the same data in wider form
unique_keywords$CO_OCCURRENCE <- 0
# Make the data available in wider form
wide_unique_keywords <- unique_keywords %>% pivot_wider(names_from  =Keyword,values_from=CO_OCCURRENCE,values_fill=0)
# Bind both wider and longer table together to get adjacency matrix
keyword_matrix <- bind_rows(unique_keywords,wide_unique_keywords)
# Dropping dummy column of co occurrence
keyword_matrix <- keyword_matrix[,!(names(keyword_matrix) %in% c("CO_OCCURRENCE"))]
# Assigning all values to 0
keyword_matrix[,c(2:249)] <- 0
## Solution 1
# Removing all blank observations
df_keywords <- df_keywords[!(df_keywords$Title == ""),]
# Combining all keywords for an article for easier analysis
df_keywords$COMBINED_KEYWORDS <-paste(trimws(df_keywords$`Keyword 1`) , trimws(df_keywords$`Keyword 2`) , trimws(df_keywords$`Keyword 3`) , trimws(df_keywords$`Keyword 4`)  , trimws(df_keywords$`Keyword 5`) , trimws(df_keywords$`Keyword 6`),                               trimws(df_keywords$`Keyword 7`)  , trimws(df_keywords$`Keyword 8`) , trimws(df_keywords$`Keyword 9`),
trimws(df_keywords$`Keyword 10`) , trimws(df_keywords$`Keyword 11`) , trimws(df_keywords$`Keyword 12`),sep="-"  )
num_articles <- dim(df_keywords)[1]
unq_keywords = names(keyword_matrix)
# 1 Extra entry in matrix
num_keywords <- dim(keyword_matrix)[1] - 1
View(unique_keywords)
df_keywords <- read.csv("keyword_data.csv")
# Pivot the table to longer form
longer_keywords <- df_keywords %>% pivot_longer(cols= starts_with("Keyword"), values_to="Keyword")
# Get all distinct keywords
unique_keywords <- distinct(longer_keywords,Keyword)
# Remove the "" empty keyword
unique_keywords <- unique_keywords[!(unique_keywords$Keyword == ""),]
# Introduce a new CO_OCCURENCE variable to get the same data in wider form
unique_keywords$CO_OCCURRENCE <- 0
# Make the data available in wider form
wide_unique_keywords <- unique_keywords %>% pivot_wider(names_from  =Keyword,values_from=CO_OCCURRENCE,values_fill=0)
# Bind both wider and longer table together to get adjacency matrix
keyword_matrix <- bind_rows(unique_keywords,wide_unique_keywords)
# Dropping dummy column of co occurrence
keyword_matrix <- keyword_matrix[,!(names(keyword_matrix) %in% c("CO_OCCURRENCE"))]
# Assigning all values to 0
keyword_matrix[,c(2:249)] <- 0
## Solution 1
# Removing all blank observations
df_keywords <- df_keywords[!(df_keywords$Title == ""),]
# Combining all keywords for an article for easier analysis
df_keywords$COMBINED_KEYWORDS <-paste(trimws(df_keywords$`Keyword 1`) , trimws(df_keywords$`Keyword 2`) , trimws(df_keywords$`Keyword 3`) , trimws(df_keywords$`Keyword 4`)  , trimws(df_keywords$`Keyword 5`) , trimws(df_keywords$`Keyword 6`),                               trimws(df_keywords$`Keyword 7`)  , trimws(df_keywords$`Keyword 8`) , trimws(df_keywords$`Keyword 9`),
trimws(df_keywords$`Keyword 10`) , trimws(df_keywords$`Keyword 11`) , trimws(df_keywords$`Keyword 12`),sep="-"  )
library(tidyr)
df_keywords <- read.csv("keyword_data.csv")
# Pivot the table to longer form
longer_keywords <- df_keywords %>% pivot_longer(cols= starts_with("Keyword"), values_to="Keyword")
# Get all distinct keywords
unique_keywords <- distinct(longer_keywords,Keyword)
# Remove the "" empty keyword
unique_keywords <- unique_keywords[!(unique_keywords$Keyword == ""),]
# Introduce a new CO_OCCURENCE variable to get the same data in wider form
unique_keywords$CO_OCCURRENCE <- 0
# Make the data available in wider form
wide_unique_keywords <- unique_keywords %>% pivot_wider(names_from  =Keyword,values_from=CO_OCCURRENCE,values_fill=0)
# Bind both wider and longer table together to get adjacency matrix
keyword_matrix <- bind_rows(unique_keywords,wide_unique_keywords)
# Dropping dummy column of co occurrence
keyword_matrix <- keyword_matrix[,!(names(keyword_matrix) %in% c("CO_OCCURRENCE"))]
# Assigning all values to 0
keyword_matrix[,c(2:249)] <- 0
## Solution 1
# Removing all blank observations
df_keywords <- df_keywords[!(df_keywords$Title == ""),]
# Combining all keywords for an article for easier analysis
df_keywords$COMBINED_KEYWORDS <-paste(trimws(df_keywords$Keyword.1) , trimws(df_keywords$Keyword.2) , trimws(df_keywords$Keyword.3) , trimws(df_keywords$Keyword.4)  , trimws(df_keywords$Keyword.5) , trimws(df_keywords$Keyword.6),                               trimws(df_keywords$Keyword.7)  , trimws(df_keywords$Keyword.8) , trimws(df_keywords$Keyword.9),
trimws(df_keywords$Keyword.10) , trimws(df_keywords$Keyword.11) , trimws(df_keywords$Keyword.2),sep="-"  )
#
# Combining all keywords for an article for easier analysis
# df_keywords$COMBINED_KEYWORDS <-paste(trimws(df_keywords$`Keyword 1`) , trimws(df_keywords$`Keyword 2`) , trimws(df_keywords$`Keyword 3`) , trimws(df_keywords$`Keyword 4`)  , trimws(df_keywords$`Keyword 5`) , trimws(df_keywords$`Keyword 6`),                               trimws(df_keywords$`Keyword 7`)  , trimws(df_keywords$`Keyword 8`) , trimws(df_keywords$`Keyword 9`),
# trimws(df_keywords$`Keyword 10`) , trimws(df_keywords$`Keyword 11`) , trimws(df_keywords$`Keyword 12`),sep="-"  )
num_articles <- dim(df_keywords)[1]
unq_keywords = names(keyword_matrix)
# 1 Extra entry in matrix
num_keywords <- dim(keyword_matrix)[1] - 1
## To correct -> Loop over articles first, then matrix
# Loop over all articles
for (i in 1:num_articles) {
current_article_keywords <- df_keywords[i,'COMBINED_KEYWORDS']
# Loop over rows in adjacency matrix
for( j in 1:num_keywords){
current_row_keyword <- keyword_matrix[j,1]
# Loop over columns in adjacency matrix
for (k in 2:num_keywords) {
#
current_col_keyword = unq_keywords[k]
if (current_article_keywords != "NA-NA-NA-NA-NA-NA-NA-NA-NA-NA-NA-NA" && current_col_keyword != current_row_keyword && (grepl(current_row_keyword,current_article_keywords,fixed = TRUE) && grepl(current_col_keyword,current_article_keywords,fixed = TRUE)) ) {
keyword_matrix[j,k] <- keyword_matrix[j,k] + 1
}
}
}
}
View(keyword_matrix)
View(keyword_matrix)
library(tidyr)
df_keywords <- read.csv("keyword_data.csv")
# Pivot the table to longer form
longer_keywords <- df_keywords %>% pivot_longer(cols= starts_with("Keyword"), values_to="Keyword")
# Get all distinct keywords
unique_keywords <- distinct(longer_keywords,Keyword)
# Remove the "" empty keyword
unique_keywords <- unique_keywords[!(unique_keywords$Keyword == ""),]
# Introduce a new CO_OCCURENCE variable to get the same data in wider form
unique_keywords$CO_OCCURRENCE <- 0
# Make the data available in wider form
wide_unique_keywords <- unique_keywords %>% pivot_wider(names_from  =Keyword,values_from=CO_OCCURRENCE,values_fill=0)
# Bind both wider and longer table together to get adjacency matrix
keyword_matrix <- bind_rows(unique_keywords,wide_unique_keywords)
# Dropping dummy column of co occurrence
keyword_matrix <- keyword_matrix[,!(names(keyword_matrix) %in% c("CO_OCCURRENCE"))]
# Assigning all values to 0
keyword_matrix[,c(2:249)] <- 0
## Solution 1
# Removing all blank observations
df_keywords <- df_keywords[!(df_keywords$Title == ""),]
# Combining all keywords for an article for easier analysis
df_keywords$COMBINED_KEYWORDS <-paste("-",trimws(df_keywords$Keyword.1) , trimws(df_keywords$Keyword.2) , trimws(df_keywords$Keyword.3) , trimws(df_keywords$Keyword.4)  , trimws(df_keywords$Keyword.5) , trimws(df_keywords$Keyword.6),                               trimws(df_keywords$Keyword.7)  , trimws(df_keywords$Keyword.8) , trimws(df_keywords$Keyword.9),
trimws(df_keywords$Keyword.10) , trimws(df_keywords$Keyword.11) , trimws(df_keywords$Keyword.2),"-",sep="-"  )
#
# Combining all keywords for an article for easier analysis
# df_keywords$COMBINED_KEYWORDS <-paste(trimws(df_keywords$`Keyword 1`) , trimws(df_keywords$`Keyword 2`) , trimws(df_keywords$`Keyword 3`) , trimws(df_keywords$`Keyword 4`)  , trimws(df_keywords$`Keyword 5`) , trimws(df_keywords$`Keyword 6`),                               trimws(df_keywords$`Keyword 7`)  , trimws(df_keywords$`Keyword 8`) , trimws(df_keywords$`Keyword 9`),
# trimws(df_keywords$`Keyword 10`) , trimws(df_keywords$`Keyword 11`) , trimws(df_keywords$`Keyword 12`),sep="-"  )
num_articles <- dim(df_keywords)[1]
unq_keywords = names(keyword_matrix)
# 1 Extra entry in matrix
num_keywords <- dim(keyword_matrix)[1] - 1
## To correct -> Loop over articles first, then matrix
# Loop over all articles
for (i in 1:num_articles) {
current_article_keywords <- df_keywords[i,'COMBINED_KEYWORDS']
# Loop over rows in adjacency matrix
for( j in 1:num_keywords){
current_row_keyword <- keyword_matrix[j,1]
# Loop over columns in adjacency matrix
for (k in 2:num_keywords) {
#
current_col_keyword = unq_keywords[k]
if (current_article_keywords != "-----------" && current_col_keyword != current_row_keyword && (grepl(current_row_keyword,current_article_keywords,fixed = TRUE) && grepl(current_col_keyword,current_article_keywords,fixed = TRUE)) ) {
keyword_matrix[j,k] <- keyword_matrix[j,k] + 1
}
}
}
}
# Combining all keywords for an article for easier analysis
df_keywords$COMBINED_KEYWORDS <-paste(trimws(df_keywords$Keyword.1) , trimws(df_keywords$Keyword.2) , trimws(df_keywords$Keyword.3) , trimws(df_keywords$Keyword.4)  , trimws(df_keywords$Keyword.5) , trimws(df_keywords$Keyword.6),                               trimws(df_keywords$Keyword.7)  , trimws(df_keywords$Keyword.8) , trimws(df_keywords$Keyword.9),
trimws(df_keywords$Keyword.10) , trimws(df_keywords$Keyword.11) , trimws(df_keywords$Keyword.2),sep="-"  )
df_keywords$COMBINED_KEYWORDS <- paste("-",df_keywords$COMBINED_KEYWORDS,"-",sep="")
library(tidyr)
df_keywords <- read.csv("keyword_data.csv")
# Pivot the table to longer form
longer_keywords <- df_keywords %>% pivot_longer(cols= starts_with("Keyword"), values_to="Keyword")
# Get all distinct keywords
unique_keywords <- distinct(longer_keywords,Keyword)
# Remove the "" empty keyword
unique_keywords <- unique_keywords[!(unique_keywords$Keyword == ""),]
# Introduce a new CO_OCCURENCE variable to get the same data in wider form
unique_keywords$CO_OCCURRENCE <- 0
# Make the data available in wider form
wide_unique_keywords <- unique_keywords %>% pivot_wider(names_from  =Keyword,values_from=CO_OCCURRENCE,values_fill=0)
# Bind both wider and longer table together to get adjacency matrix
keyword_matrix <- bind_rows(unique_keywords,wide_unique_keywords)
# Dropping dummy column of co occurrence
keyword_matrix <- keyword_matrix[,!(names(keyword_matrix) %in% c("CO_OCCURRENCE"))]
# Assigning all values to 0
keyword_matrix[,c(2:249)] <- 0
## Solution 1
# Removing all blank observations
df_keywords <- df_keywords[!(df_keywords$Title == ""),]
# Combining all keywords for an article for easier analysis
df_keywords$COMBINED_KEYWORDS <-paste(trimws(df_keywords$Keyword.1) , trimws(df_keywords$Keyword.2) , trimws(df_keywords$Keyword.3) , trimws(df_keywords$Keyword.4)  , trimws(df_keywords$Keyword.5) , trimws(df_keywords$Keyword.6),                               trimws(df_keywords$Keyword.7)  , trimws(df_keywords$Keyword.8) , trimws(df_keywords$Keyword.9),
trimws(df_keywords$Keyword.10) , trimws(df_keywords$Keyword.11) , trimws(df_keywords$Keyword.2),sep="-"  )
df_keywords$COMBINED_KEYWORDS <- paste("-",df_keywords$COMBINED_KEYWORDS,"-",sep="")
#
# Combining all keywords for an article for easier analysis
# df_keywords$COMBINED_KEYWORDS <-paste(trimws(df_keywords$`Keyword 1`) , trimws(df_keywords$`Keyword 2`) , trimws(df_keywords$`Keyword 3`) , trimws(df_keywords$`Keyword 4`)  , trimws(df_keywords$`Keyword 5`) , trimws(df_keywords$`Keyword 6`),                               trimws(df_keywords$`Keyword 7`)  , trimws(df_keywords$`Keyword 8`) , trimws(df_keywords$`Keyword 9`),
# trimws(df_keywords$`Keyword 10`) , trimws(df_keywords$`Keyword 11`) , trimws(df_keywords$`Keyword 12`),sep="-"  )
num_articles <- dim(df_keywords)[1]
unq_keywords = names(keyword_matrix)
# 1 Extra entry in matrix
num_keywords <- dim(keyword_matrix)[1] - 1
## To correct -> Loop over articles first, then matrix
# Loop over all articles
for (i in 1:num_articles) {
current_article_keywords <- df_keywords[i,'COMBINED_KEYWORDS']
# Loop over rows in adjacency matrix
for( j in 1:num_keywords){
current_row_keyword <- paste("-",keyword_matrix[j,1],"-",sep="")
# Loop over columns in adjacency matrix
for (k in 2:num_keywords) {
#
current_col_keyword <- paste("-",unq_keywords[k],"-",sep="")
if (current_article_keywords != "-----------" && current_col_keyword != current_row_keyword && (grepl(current_row_keyword,current_article_keywords,fixed = TRUE) && grepl(current_col_keyword,current_article_keywords,fixed = TRUE)) ) {
keyword_matrix[j,k] <- keyword_matrix[j,k] + 1
}
}
}
}
View(keyword_matrix)
View(df_keywords)
library(tidyr)
df_keywords <- read.csv("keyword_data.csv")
# Pivot the table to longer form
longer_keywords <- df_keywords %>% pivot_longer(cols= starts_with("Keyword"), values_to="Keyword")
# Get all distinct keywords
unique_keywords <- distinct(longer_keywords,Keyword)
# Remove the "" empty keyword
unique_keywords <- unique_keywords[!(unique_keywords$Keyword == ""),]
# Introduce a new CO_OCCURENCE variable to get the same data in wider form
unique_keywords$CO_OCCURRENCE <- 0
# Make the data available in wider form
wide_unique_keywords <- unique_keywords %>% pivot_wider(names_from  =Keyword,values_from=CO_OCCURRENCE,values_fill=0)
# Bind both wider and longer table together to get adjacency matrix
keyword_matrix <- bind_rows(unique_keywords,wide_unique_keywords)
# Dropping dummy column of co occurrence
keyword_matrix <- keyword_matrix[,!(names(keyword_matrix) %in% c("CO_OCCURRENCE"))]
# Assigning all values to 0
keyword_matrix[,c(2:249)] <- 0
## Solution 1
# Removing all blank observations
df_keywords <- df_keywords[!(df_keywords$Title == ""),]
# Combining all keywords for an article for easier analysis
df_keywords$COMBINED_KEYWORDS <-paste(trimws(df_keywords$Keyword.1) , trimws(df_keywords$Keyword.2) , trimws(df_keywords$Keyword.3) , trimws(df_keywords$Keyword.4)  , trimws(df_keywords$Keyword.5) , trimws(df_keywords$Keyword.6),                               trimws(df_keywords$Keyword.7)  , trimws(df_keywords$Keyword.8) , trimws(df_keywords$Keyword.9),
trimws(df_keywords$Keyword.10) , trimws(df_keywords$Keyword.11) , trimws(df_keywords$Keyword.2),sep="-"  )
df_keywords$COMBINED_KEYWORDS <- paste("-",df_keywords$COMBINED_KEYWORDS,"-",sep="")
#
# Combining all keywords for an article for easier analysis
# df_keywords$COMBINED_KEYWORDS <-paste(trimws(df_keywords$`Keyword 1`) , trimws(df_keywords$`Keyword 2`) , trimws(df_keywords$`Keyword 3`) , trimws(df_keywords$`Keyword 4`)  , trimws(df_keywords$`Keyword 5`) , trimws(df_keywords$`Keyword 6`),                               trimws(df_keywords$`Keyword 7`)  , trimws(df_keywords$`Keyword 8`) , trimws(df_keywords$`Keyword 9`),
# trimws(df_keywords$`Keyword 10`) , trimws(df_keywords$`Keyword 11`) , trimws(df_keywords$`Keyword 12`),sep="-"  )
num_articles <- dim(df_keywords)[1]
unq_keywords = names(keyword_matrix)
# 1 Extra entry in matrix
num_keywords <- dim(keyword_matrix)[1] - 1
## To correct -> Loop over articles first, then matrix
# Loop over all articles
for (i in 1:num_articles) {
current_article_keywords <- df_keywords[i,'COMBINED_KEYWORDS']
# Loop over rows in adjacency matrix
for( j in 1:num_keywords){
current_row_keyword <- paste("-",keyword_matrix[j,1],"-",sep="")
# Loop over columns in adjacency matrix
for (k in 2:num_keywords) {
#
current_col_keyword <- paste("-",unq_keywords[k],"-",sep="")
if (current_article_keywords != "-------------" && current_col_keyword != current_row_keyword && (grepl(current_row_keyword,current_article_keywords,fixed = TRUE) && grepl(current_col_keyword,current_article_keywords,fixed = TRUE)) ) {
keyword_matrix[j,k] <- keyword_matrix[j,k] + 1
}
}
}
}
View(keyword_matrix)
View(adjacency_matrix)
View(keyword_matrix)
View(keyword_matrix)
View(df_keywords)
View(keyword_matrix)
library(tidyr)
df_keywords <- read.csv("keyword_data.csv")
# Pivot the table to longer form
longer_keywords <- df_keywords %>% pivot_longer(cols= starts_with("Keyword"), values_to="Keyword")
# Get all distinct keywords
unique_keywords <- distinct(longer_keywords,Keyword)
# Remove the "" empty keyword
unique_keywords <- unique_keywords[!(unique_keywords$Keyword == ""),]
# Introduce a new CO_OCCURENCE variable to get the same data in wider form
unique_keywords$CO_OCCURRENCE <- 0
# Make the data available in wider form
wide_unique_keywords <- unique_keywords %>% pivot_wider(names_from  =Keyword,values_from=CO_OCCURRENCE,values_fill=0)
# Bind both wider and longer table together to get adjacency matrix
keyword_matrix <- bind_rows(unique_keywords,wide_unique_keywords)
# Dropping dummy column of co occurrence
keyword_matrix <- keyword_matrix[,!(names(keyword_matrix) %in% c("CO_OCCURRENCE"))]
# Assigning all values to 0
keyword_matrix[,c(2:249)] <- 0
## Solution 1
# Removing all blank observations
df_keywords <- df_keywords[!(df_keywords$Title == ""),]
# Combining all keywords for an article for easier analysis
df_keywords$COMBINED_KEYWORDS <-paste(trimws(df_keywords$Keyword.1) , trimws(df_keywords$Keyword.2) , trimws(df_keywords$Keyword.3) , trimws(df_keywords$Keyword.4)  , trimws(df_keywords$Keyword.5) , trimws(df_keywords$Keyword.6),                               trimws(df_keywords$Keyword.7)  , trimws(df_keywords$Keyword.8) , trimws(df_keywords$Keyword.9),
trimws(df_keywords$Keyword.10) , trimws(df_keywords$Keyword.11) , trimws(df_keywords$Keyword.2),sep="-"  )
df_keywords$COMBINED_KEYWORDS <- paste("-",df_keywords$COMBINED_KEYWORDS,"-",sep="")
#
# Combining all keywords for an article for easier analysis
# df_keywords$COMBINED_KEYWORDS <-paste(trimws(df_keywords$`Keyword 1`) , trimws(df_keywords$`Keyword 2`) , trimws(df_keywords$`Keyword 3`) , trimws(df_keywords$`Keyword 4`)  , trimws(df_keywords$`Keyword 5`) , trimws(df_keywords$`Keyword 6`),                               trimws(df_keywords$`Keyword 7`)  , trimws(df_keywords$`Keyword 8`) , trimws(df_keywords$`Keyword 9`),
# trimws(df_keywords$`Keyword 10`) , trimws(df_keywords$`Keyword 11`) , trimws(df_keywords$`Keyword 12`),sep="-"  )
num_articles <- dim(df_keywords)[1]
unq_keywords = names(keyword_matrix)
# 1 Extra entry in matrix
num_keywords <- dim(keyword_matrix)[1] - 1
## To correct -> Loop over articles first, then matrix
# Loop over all articles
for (i in 1:num_articles) {
current_article_keywords <- df_keywords[i,'COMBINED_KEYWORDS']
# Loop over rows in adjacency matrix
for( j in 1:num_keywords){
current_row_keyword <- paste("-",keyword_matrix[j,1],"-",sep="")
# Loop over columns in adjacency matrix
for (k in 2:num_keywords) {
#
current_col_keyword <- paste("-",unq_keywords[k],"-",sep="")
if (current_article_keywords != "-------------" && current_col_keyword != current_row_keyword && (grepl(current_row_keyword,current_article_keywords,fixed = TRUE) && grepl(current_col_keyword,current_article_keywords,fixed = TRUE)) ) {
keyword_matrix[j,k] <- keyword_matrix[j,k] + 1
}
}
}
}
View(keyword_matrix)
View(adjacency_matrix)
sum(adjacency_matrix)
sum(keyword_matrix)
sum(keyword_matrix[,2:249])
